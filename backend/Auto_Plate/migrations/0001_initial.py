# Generated by Django 5.1.3 on 2025-01-08 09:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="LicensePlateLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("plate_number", models.CharField(max_length=50)),
                ("captured_at", models.DateTimeField(auto_now_add=True)),
                (
                    "image_path",
                    models.ImageField(upload_to="AutoPlate_backEnd/data/captured"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ParkingLot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
                ("location", models.CharField(max_length=300)),
                ("capacity", models.IntegerField()),
                ("current_occupancy", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "rate_per_hour_2w",
                    models.DecimalField(decimal_places=2, default=10, max_digits=5),
                ),
                (
                    "rate_per_hour_4w",
                    models.DecimalField(decimal_places=2, default=25, max_digits=5),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Resident",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("full_name", models.CharField(max_length=150)),
                ("phone_number", models.CharField(max_length=15, unique=True)),
                (
                    "photo",
                    models.ImageField(
                        blank=True, null=True, upload_to="resident_photos/"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("plate_number", models.CharField(max_length=50, unique=True)),
                (
                    "vehicle_type",
                    models.CharField(
                        choices=[
                            ("2-wheeler", "2-Wheeler"),
                            ("4-wheeler", "4-Wheeler"),
                        ],
                        default="2-wheeler",
                        max_length=20,
                    ),
                ),
                ("is_resident", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("in", "In"), ("out", "Out")],
                        default="out",
                        max_length=10,
                    ),
                ),
                (
                    "resident",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vehicles",
                        to="Auto_Plate.resident",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ParkingLotRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("entry_time", models.DateTimeField(auto_now_add=True)),
                ("exit_time", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("in", "In"), ("out", "Out")], max_length=10
                    ),
                ),
                (
                    "parked_time",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "total_fee",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "parking_lot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="Auto_Plate.parkinglot",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="Auto_Plate.vehicle",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("full_name", models.CharField(max_length=150)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "role",
                    models.CharField(
                        choices=[("admin", "Admin"), ("user", "User")], max_length=64
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_resident", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
